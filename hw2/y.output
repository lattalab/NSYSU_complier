Terminals unused in grammar

    SINGLE
    ABSOLUTE
    AND
    BREAK
    CASE
    CONST
    CONTINUE
    ELSE
    FUNCTION
    NIL
    NOT
    OBJECT
    OR
    WHILE


State 94 conflicts: 1 shift/reduce


Grammar

    0 $accept: prog $end

    1 prog: PROGRAM progname ';' VAR declist ';' BEG stmtlist ';' END '.'

    2 $@1: ε

    3 prog: PROGRAM progname $@1 VAR declist ';' BEG stmtlist ';' END '.'

    4 $@2: ε

    5 prog: PROGRAM progname ';' VAR declist $@2 BEG stmtlist ';' END '.'
    6     | PROGRAM progname ';' VAR declist ';' BEG END '.'
    7     | PROGRAM progname ';' VAR declist ';' BEG stmtlist ';' END
    8     | PROGRAM progname ';' VAR declist ';' BEG stmtlist ';' END ';'
    9     | error

   10 progname: ID
   11         | XID

   12 declist: dec
   13        | declist ';' dec

   14 dec: idlist ':' type
   15    | idlist ASSIGN type
   16    | idlist EQUAL type

   17 type: standtype
   18     | arraytype

   19 standtype: INTEGER
   20          | REAL
   21          | DOUBLE
   22          | STRING

   23 arraytype: ARRAY '[' INT '.' '.' INT ']' OF standtype

   24 idlist: ID
   25       | idlist ',' ID
   26       | XID
   27       | idlist ',' XID

   28 stmtlist: stmt
   29         | stmtlist ';' stmt

   30 stmt: assign
   31     | read
   32     | write
   33     | for
   34     | ifstmt

   35 assign: varid ASSIGN simpexp
   36       | varid EQUAL simpexp
   37       | varid ':' simpexp

   38 exp: simpexp
   39    | exp relop simpexp

   40 relop: LT
   41      | EQUAL
   42      | GT
   43      | LE
   44      | GE
   45      | NE
   46      | MOD

   47 simpexp: term
   48        | simpexp '+' term
   49        | simpexp '-' term

   50 term: factor
   51     | factor '*' factor
   52     | factor '/' factor

   53 factor: varid
   54       | INT
   55       | REAL_NUM
   56       | LP simpexp RP
   57       | STR
   58       | XREAL

   59 read: readfunc
   60     | readfunc LP RP
   61     | readfunc LP readlist RP

   62 readfunc: READ
   63         | READLN

   64 readlist: varid
   65         | readlist ',' varid

   66 write: writefunc
   67      | writefunc LP RP
   68      | writefunc LP writelist RP

   69 writefunc: WRITE
   70          | WRITELN

   71 writelist: term
   72          | writelist ',' term

   73 for: FOR idxexp DO body
   74    | FOR idxexp body

   75 idxexp: varid ASSIGN simpexp TO exp

   76 varid: ID
   77      | ID '[' simpexp ']'
   78      | XID

   79 ifstmt: IF exp RP THEN body
   80       | IF LP exp RP THEN body
   81       | IF LP exp RP body
   82       | IF LP exp THEN body

   83 body: stmt
   84     | BEG stmtlist ';' END


Terminals, with rules where they appear

    $end (0) 0
    '*' (42) 51
    '+' (43) 48
    ',' (44) 25 27 65 72
    '-' (45) 49
    '.' (46) 1 3 5 6 23
    '/' (47) 52
    ':' (58) 14 37
    ';' (59) 1 3 5 6 7 8 13 29 84
    '[' (91) 23 77
    ']' (93) 23 77
    error (256) 9
    DOUBLE <str> (258) 21
    ID <str> (259) 10 24 25 76 77
    INTEGER <str> (260) 19
    REAL <str> (261) 20
    SINGLE <str> (262)
    STR <str> (263) 57
    STRING <str> (264) 22
    INT <str> (265) 23 54
    REAL_NUM <str> (266) 55
    ABSOLUTE <str> (267)
    AND <str> (268)
    ARRAY <str> (269) 23
    BEG <str> (270) 1 3 5 6 7 8 84
    BREAK <str> (271)
    CASE <str> (272)
    CONST <str> (273)
    CONTINUE <str> (274)
    DO <str> (275) 73
    ELSE <str> (276)
    END <str> (277) 1 3 5 6 7 8 84
    FOR <str> (278) 73 74
    FUNCTION <str> (279)
    IF <str> (280) 79 80 81 82
    MOD <str> (281) 46
    NIL <str> (282)
    NOT <str> (283)
    OBJECT <str> (284)
    OF <str> (285) 23
    OR <str> (286)
    PROGRAM <str> (287) 1 3 5 6 7 8
    READ <str> (288) 62
    READLN <str> (289) 63
    THEN <str> (290) 79 80 82
    TO <str> (291) 75
    VAR <str> (292) 1 3 5 6 7 8
    WHILE <str> (293)
    WRITE <str> (294) 69
    WRITELN <str> (295) 70
    LT <str> (296) 40
    EQUAL <str> (297) 16 36 41
    GT <str> (298) 42
    ASSIGN <str> (299) 15 35 75
    LE <str> (300) 43
    GE <str> (301) 44
    NE <str> (302) 45
    LP <str> (303) 56 60 61 67 68 80 81 82
    RP <str> (304) 56 60 61 67 68 79 80 81
    XID <str> (305) 11 26 27 78
    XREAL <str> (306) 58


Nonterminals, with rules where they appear

    $accept (62)
        on left: 0
    prog (63)
        on left: 1 3 5 6 7 8 9
        on right: 0
    $@1 (64)
        on left: 2
        on right: 3
    $@2 (65)
        on left: 4
        on right: 5
    progname (66)
        on left: 10 11
        on right: 1 3 5 6 7 8
    declist (67)
        on left: 12 13
        on right: 1 3 5 6 7 8 13
    dec (68)
        on left: 14 15 16
        on right: 12 13
    type <str> (69)
        on left: 17 18
        on right: 14 15 16
    standtype <str> (70)
        on left: 19 20 21 22
        on right: 17 23
    arraytype <str> (71)
        on left: 23
        on right: 18
    idlist (72)
        on left: 24 25 26 27
        on right: 14 15 16 25 27
    stmtlist (73)
        on left: 28 29
        on right: 1 3 5 7 8 29 84
    stmt (74)
        on left: 30 31 32 33 34
        on right: 28 29 83
    assign (75)
        on left: 35 36 37
        on right: 30
    exp (76)
        on left: 38 39
        on right: 39 75 79 80 81 82
    relop (77)
        on left: 40 41 42 43 44 45 46
        on right: 39
    simpexp <str> (78)
        on left: 47 48 49
        on right: 35 36 37 38 39 48 49 56 75 77
    term <str> (79)
        on left: 50 51 52
        on right: 47 48 49 71 72
    factor <str> (80)
        on left: 53 54 55 56 57 58
        on right: 50 51 52
    read (81)
        on left: 59 60 61
        on right: 31
    readfunc (82)
        on left: 62 63
        on right: 59 60 61
    readlist (83)
        on left: 64 65
        on right: 61 65
    write (84)
        on left: 66 67 68
        on right: 32
    writefunc (85)
        on left: 69 70
        on right: 66 67 68
    writelist (86)
        on left: 71 72
        on right: 68 72
    for (87)
        on left: 73 74
        on right: 33
    idxexp (88)
        on left: 75
        on right: 73 74
    varid <str> (89)
        on left: 76 77 78
        on right: 35 36 37 53 64 65 75
    ifstmt (90)
        on left: 79 80 81 82
        on right: 34
    body (91)
        on left: 83 84
        on right: 73 74 79 80 81 82


State 0

    0 $accept: • prog $end

    error    shift, and go to state 1
    PROGRAM  shift, and go to state 2

    prog  go to state 3


State 1

    9 prog: error •

    $default  reduce using rule 9 (prog)


State 2

    1 prog: PROGRAM • progname ';' VAR declist ';' BEG stmtlist ';' END '.'
    3     | PROGRAM • progname $@1 VAR declist ';' BEG stmtlist ';' END '.'
    5     | PROGRAM • progname ';' VAR declist $@2 BEG stmtlist ';' END '.'
    6     | PROGRAM • progname ';' VAR declist ';' BEG END '.'
    7     | PROGRAM • progname ';' VAR declist ';' BEG stmtlist ';' END
    8     | PROGRAM • progname ';' VAR declist ';' BEG stmtlist ';' END ';'

    ID   shift, and go to state 4
    XID  shift, and go to state 5

    progname  go to state 6


State 3

    0 $accept: prog • $end

    $end  shift, and go to state 7


State 4

   10 progname: ID •

    $default  reduce using rule 10 (progname)


State 5

   11 progname: XID •

    $default  reduce using rule 11 (progname)


State 6

    1 prog: PROGRAM progname • ';' VAR declist ';' BEG stmtlist ';' END '.'
    3     | PROGRAM progname • $@1 VAR declist ';' BEG stmtlist ';' END '.'
    5     | PROGRAM progname • ';' VAR declist $@2 BEG stmtlist ';' END '.'
    6     | PROGRAM progname • ';' VAR declist ';' BEG END '.'
    7     | PROGRAM progname • ';' VAR declist ';' BEG stmtlist ';' END
    8     | PROGRAM progname • ';' VAR declist ';' BEG stmtlist ';' END ';'

    ';'  shift, and go to state 8

    $default  reduce using rule 2 ($@1)

    $@1  go to state 9


State 7

    0 $accept: prog $end •

    $default  accept


State 8

    1 prog: PROGRAM progname ';' • VAR declist ';' BEG stmtlist ';' END '.'
    5     | PROGRAM progname ';' • VAR declist $@2 BEG stmtlist ';' END '.'
    6     | PROGRAM progname ';' • VAR declist ';' BEG END '.'
    7     | PROGRAM progname ';' • VAR declist ';' BEG stmtlist ';' END
    8     | PROGRAM progname ';' • VAR declist ';' BEG stmtlist ';' END ';'

    VAR  shift, and go to state 10


State 9

    3 prog: PROGRAM progname $@1 • VAR declist ';' BEG stmtlist ';' END '.'

    VAR  shift, and go to state 11


State 10

    1 prog: PROGRAM progname ';' VAR • declist ';' BEG stmtlist ';' END '.'
    5     | PROGRAM progname ';' VAR • declist $@2 BEG stmtlist ';' END '.'
    6     | PROGRAM progname ';' VAR • declist ';' BEG END '.'
    7     | PROGRAM progname ';' VAR • declist ';' BEG stmtlist ';' END
    8     | PROGRAM progname ';' VAR • declist ';' BEG stmtlist ';' END ';'

    ID   shift, and go to state 12
    XID  shift, and go to state 13

    declist  go to state 14
    dec      go to state 15
    idlist   go to state 16


State 11

    3 prog: PROGRAM progname $@1 VAR • declist ';' BEG stmtlist ';' END '.'

    ID   shift, and go to state 12
    XID  shift, and go to state 13

    declist  go to state 17
    dec      go to state 15
    idlist   go to state 16


State 12

   24 idlist: ID •

    $default  reduce using rule 24 (idlist)


State 13

   26 idlist: XID •

    $default  reduce using rule 26 (idlist)


State 14

    1 prog: PROGRAM progname ';' VAR declist • ';' BEG stmtlist ';' END '.'
    5     | PROGRAM progname ';' VAR declist • $@2 BEG stmtlist ';' END '.'
    6     | PROGRAM progname ';' VAR declist • ';' BEG END '.'
    7     | PROGRAM progname ';' VAR declist • ';' BEG stmtlist ';' END
    8     | PROGRAM progname ';' VAR declist • ';' BEG stmtlist ';' END ';'
   13 declist: declist • ';' dec

    ';'  shift, and go to state 18

    $default  reduce using rule 4 ($@2)

    $@2  go to state 19


State 15

   12 declist: dec •

    $default  reduce using rule 12 (declist)


State 16

   14 dec: idlist • ':' type
   15    | idlist • ASSIGN type
   16    | idlist • EQUAL type
   25 idlist: idlist • ',' ID
   27       | idlist • ',' XID

    EQUAL   shift, and go to state 20
    ASSIGN  shift, and go to state 21
    ':'     shift, and go to state 22
    ','     shift, and go to state 23


State 17

    3 prog: PROGRAM progname $@1 VAR declist • ';' BEG stmtlist ';' END '.'
   13 declist: declist • ';' dec

    ';'  shift, and go to state 24


State 18

    1 prog: PROGRAM progname ';' VAR declist ';' • BEG stmtlist ';' END '.'
    6     | PROGRAM progname ';' VAR declist ';' • BEG END '.'
    7     | PROGRAM progname ';' VAR declist ';' • BEG stmtlist ';' END
    8     | PROGRAM progname ';' VAR declist ';' • BEG stmtlist ';' END ';'
   13 declist: declist ';' • dec

    ID   shift, and go to state 12
    BEG  shift, and go to state 25
    XID  shift, and go to state 13

    dec     go to state 26
    idlist  go to state 16


State 19

    5 prog: PROGRAM progname ';' VAR declist $@2 • BEG stmtlist ';' END '.'

    BEG  shift, and go to state 27


State 20

   16 dec: idlist EQUAL • type

    DOUBLE   shift, and go to state 28
    INTEGER  shift, and go to state 29
    REAL     shift, and go to state 30
    STRING   shift, and go to state 31
    ARRAY    shift, and go to state 32

    type       go to state 33
    standtype  go to state 34
    arraytype  go to state 35


State 21

   15 dec: idlist ASSIGN • type

    DOUBLE   shift, and go to state 28
    INTEGER  shift, and go to state 29
    REAL     shift, and go to state 30
    STRING   shift, and go to state 31
    ARRAY    shift, and go to state 32

    type       go to state 36
    standtype  go to state 34
    arraytype  go to state 35


State 22

   14 dec: idlist ':' • type

    DOUBLE   shift, and go to state 28
    INTEGER  shift, and go to state 29
    REAL     shift, and go to state 30
    STRING   shift, and go to state 31
    ARRAY    shift, and go to state 32

    type       go to state 37
    standtype  go to state 34
    arraytype  go to state 35


State 23

   25 idlist: idlist ',' • ID
   27       | idlist ',' • XID

    ID   shift, and go to state 38
    XID  shift, and go to state 39


State 24

    3 prog: PROGRAM progname $@1 VAR declist ';' • BEG stmtlist ';' END '.'
   13 declist: declist ';' • dec

    ID   shift, and go to state 12
    BEG  shift, and go to state 40
    XID  shift, and go to state 13

    dec     go to state 26
    idlist  go to state 16


State 25

    1 prog: PROGRAM progname ';' VAR declist ';' BEG • stmtlist ';' END '.'
    6     | PROGRAM progname ';' VAR declist ';' BEG • END '.'
    7     | PROGRAM progname ';' VAR declist ';' BEG • stmtlist ';' END
    8     | PROGRAM progname ';' VAR declist ';' BEG • stmtlist ';' END ';'

    ID       shift, and go to state 41
    END      shift, and go to state 42
    FOR      shift, and go to state 43
    IF       shift, and go to state 44
    READ     shift, and go to state 45
    READLN   shift, and go to state 46
    WRITE    shift, and go to state 47
    WRITELN  shift, and go to state 48
    XID      shift, and go to state 49

    stmtlist   go to state 50
    stmt       go to state 51
    assign     go to state 52
    read       go to state 53
    readfunc   go to state 54
    write      go to state 55
    writefunc  go to state 56
    for        go to state 57
    varid      go to state 58
    ifstmt     go to state 59


State 26

   13 declist: declist ';' dec •

    $default  reduce using rule 13 (declist)


State 27

    5 prog: PROGRAM progname ';' VAR declist $@2 BEG • stmtlist ';' END '.'

    ID       shift, and go to state 41
    FOR      shift, and go to state 43
    IF       shift, and go to state 44
    READ     shift, and go to state 45
    READLN   shift, and go to state 46
    WRITE    shift, and go to state 47
    WRITELN  shift, and go to state 48
    XID      shift, and go to state 49

    stmtlist   go to state 60
    stmt       go to state 51
    assign     go to state 52
    read       go to state 53
    readfunc   go to state 54
    write      go to state 55
    writefunc  go to state 56
    for        go to state 57
    varid      go to state 58
    ifstmt     go to state 59


State 28

   21 standtype: DOUBLE •

    $default  reduce using rule 21 (standtype)


State 29

   19 standtype: INTEGER •

    $default  reduce using rule 19 (standtype)


State 30

   20 standtype: REAL •

    $default  reduce using rule 20 (standtype)


State 31

   22 standtype: STRING •

    $default  reduce using rule 22 (standtype)


State 32

   23 arraytype: ARRAY • '[' INT '.' '.' INT ']' OF standtype

    '['  shift, and go to state 61


State 33

   16 dec: idlist EQUAL type •

    $default  reduce using rule 16 (dec)


State 34

   17 type: standtype •

    $default  reduce using rule 17 (type)


State 35

   18 type: arraytype •

    $default  reduce using rule 18 (type)


State 36

   15 dec: idlist ASSIGN type •

    $default  reduce using rule 15 (dec)


State 37

   14 dec: idlist ':' type •

    $default  reduce using rule 14 (dec)


State 38

   25 idlist: idlist ',' ID •

    $default  reduce using rule 25 (idlist)


State 39

   27 idlist: idlist ',' XID •

    $default  reduce using rule 27 (idlist)


State 40

    3 prog: PROGRAM progname $@1 VAR declist ';' BEG • stmtlist ';' END '.'

    ID       shift, and go to state 41
    FOR      shift, and go to state 43
    IF       shift, and go to state 44
    READ     shift, and go to state 45
    READLN   shift, and go to state 46
    WRITE    shift, and go to state 47
    WRITELN  shift, and go to state 48
    XID      shift, and go to state 49

    stmtlist   go to state 62
    stmt       go to state 51
    assign     go to state 52
    read       go to state 53
    readfunc   go to state 54
    write      go to state 55
    writefunc  go to state 56
    for        go to state 57
    varid      go to state 58
    ifstmt     go to state 59


State 41

   76 varid: ID •
   77      | ID • '[' simpexp ']'

    '['  shift, and go to state 63

    $default  reduce using rule 76 (varid)


State 42

    6 prog: PROGRAM progname ';' VAR declist ';' BEG END • '.'

    '.'  shift, and go to state 64


State 43

   73 for: FOR • idxexp DO body
   74    | FOR • idxexp body

    ID   shift, and go to state 41
    XID  shift, and go to state 49

    idxexp  go to state 65
    varid   go to state 66


State 44

   79 ifstmt: IF • exp RP THEN body
   80       | IF • LP exp RP THEN body
   81       | IF • LP exp RP body
   82       | IF • LP exp THEN body

    ID        shift, and go to state 41
    STR       shift, and go to state 67
    INT       shift, and go to state 68
    REAL_NUM  shift, and go to state 69
    LP        shift, and go to state 70
    XID       shift, and go to state 49
    XREAL     shift, and go to state 71

    exp      go to state 72
    simpexp  go to state 73
    term     go to state 74
    factor   go to state 75
    varid    go to state 76


State 45

   62 readfunc: READ •

    $default  reduce using rule 62 (readfunc)


State 46

   63 readfunc: READLN •

    $default  reduce using rule 63 (readfunc)


State 47

   69 writefunc: WRITE •

    $default  reduce using rule 69 (writefunc)


State 48

   70 writefunc: WRITELN •

    $default  reduce using rule 70 (writefunc)


State 49

   78 varid: XID •

    $default  reduce using rule 78 (varid)


State 50

    1 prog: PROGRAM progname ';' VAR declist ';' BEG stmtlist • ';' END '.'
    7     | PROGRAM progname ';' VAR declist ';' BEG stmtlist • ';' END
    8     | PROGRAM progname ';' VAR declist ';' BEG stmtlist • ';' END ';'
   29 stmtlist: stmtlist • ';' stmt

    ';'  shift, and go to state 77


State 51

   28 stmtlist: stmt •

    $default  reduce using rule 28 (stmtlist)


State 52

   30 stmt: assign •

    $default  reduce using rule 30 (stmt)


State 53

   31 stmt: read •

    $default  reduce using rule 31 (stmt)


State 54

   59 read: readfunc •
   60     | readfunc • LP RP
   61     | readfunc • LP readlist RP

    LP  shift, and go to state 78

    $default  reduce using rule 59 (read)


State 55

   32 stmt: write •

    $default  reduce using rule 32 (stmt)


State 56

   66 write: writefunc •
   67      | writefunc • LP RP
   68      | writefunc • LP writelist RP

    LP  shift, and go to state 79

    $default  reduce using rule 66 (write)


State 57

   33 stmt: for •

    $default  reduce using rule 33 (stmt)


State 58

   35 assign: varid • ASSIGN simpexp
   36       | varid • EQUAL simpexp
   37       | varid • ':' simpexp

    EQUAL   shift, and go to state 80
    ASSIGN  shift, and go to state 81
    ':'     shift, and go to state 82


State 59

   34 stmt: ifstmt •

    $default  reduce using rule 34 (stmt)


State 60

    5 prog: PROGRAM progname ';' VAR declist $@2 BEG stmtlist • ';' END '.'
   29 stmtlist: stmtlist • ';' stmt

    ';'  shift, and go to state 83


State 61

   23 arraytype: ARRAY '[' • INT '.' '.' INT ']' OF standtype

    INT  shift, and go to state 84


State 62

    3 prog: PROGRAM progname $@1 VAR declist ';' BEG stmtlist • ';' END '.'
   29 stmtlist: stmtlist • ';' stmt

    ';'  shift, and go to state 85


State 63

   77 varid: ID '[' • simpexp ']'

    ID        shift, and go to state 41
    STR       shift, and go to state 67
    INT       shift, and go to state 68
    REAL_NUM  shift, and go to state 69
    LP        shift, and go to state 86
    XID       shift, and go to state 49
    XREAL     shift, and go to state 71

    simpexp  go to state 87
    term     go to state 74
    factor   go to state 75
    varid    go to state 76


State 64

    6 prog: PROGRAM progname ';' VAR declist ';' BEG END '.' •

    $default  reduce using rule 6 (prog)


State 65

   73 for: FOR idxexp • DO body
   74    | FOR idxexp • body

    ID       shift, and go to state 41
    BEG      shift, and go to state 88
    DO       shift, and go to state 89
    FOR      shift, and go to state 43
    IF       shift, and go to state 44
    READ     shift, and go to state 45
    READLN   shift, and go to state 46
    WRITE    shift, and go to state 47
    WRITELN  shift, and go to state 48
    XID      shift, and go to state 49

    stmt       go to state 90
    assign     go to state 52
    read       go to state 53
    readfunc   go to state 54
    write      go to state 55
    writefunc  go to state 56
    for        go to state 57
    varid      go to state 58
    ifstmt     go to state 59
    body       go to state 91


State 66

   75 idxexp: varid • ASSIGN simpexp TO exp

    ASSIGN  shift, and go to state 92


State 67

   57 factor: STR •

    $default  reduce using rule 57 (factor)


State 68

   54 factor: INT •

    $default  reduce using rule 54 (factor)


State 69

   55 factor: REAL_NUM •

    $default  reduce using rule 55 (factor)


State 70

   56 factor: LP • simpexp RP
   80 ifstmt: IF LP • exp RP THEN body
   81       | IF LP • exp RP body
   82       | IF LP • exp THEN body

    ID        shift, and go to state 41
    STR       shift, and go to state 67
    INT       shift, and go to state 68
    REAL_NUM  shift, and go to state 69
    LP        shift, and go to state 86
    XID       shift, and go to state 49
    XREAL     shift, and go to state 71

    exp      go to state 93
    simpexp  go to state 94
    term     go to state 74
    factor   go to state 75
    varid    go to state 76


State 71

   58 factor: XREAL •

    $default  reduce using rule 58 (factor)


State 72

   39 exp: exp • relop simpexp
   79 ifstmt: IF exp • RP THEN body

    MOD    shift, and go to state 95
    LT     shift, and go to state 96
    EQUAL  shift, and go to state 97
    GT     shift, and go to state 98
    LE     shift, and go to state 99
    GE     shift, and go to state 100
    NE     shift, and go to state 101
    RP     shift, and go to state 102

    relop  go to state 103


State 73

   38 exp: simpexp •
   48 simpexp: simpexp • '+' term
   49        | simpexp • '-' term

    '+'  shift, and go to state 104
    '-'  shift, and go to state 105

    $default  reduce using rule 38 (exp)


State 74

   47 simpexp: term •

    $default  reduce using rule 47 (simpexp)


State 75

   50 term: factor •
   51     | factor • '*' factor
   52     | factor • '/' factor

    '*'  shift, and go to state 106
    '/'  shift, and go to state 107

    $default  reduce using rule 50 (term)


State 76

   53 factor: varid •

    $default  reduce using rule 53 (factor)


State 77

    1 prog: PROGRAM progname ';' VAR declist ';' BEG stmtlist ';' • END '.'
    7     | PROGRAM progname ';' VAR declist ';' BEG stmtlist ';' • END
    8     | PROGRAM progname ';' VAR declist ';' BEG stmtlist ';' • END ';'
   29 stmtlist: stmtlist ';' • stmt

    ID       shift, and go to state 41
    END      shift, and go to state 108
    FOR      shift, and go to state 43
    IF       shift, and go to state 44
    READ     shift, and go to state 45
    READLN   shift, and go to state 46
    WRITE    shift, and go to state 47
    WRITELN  shift, and go to state 48
    XID      shift, and go to state 49

    stmt       go to state 109
    assign     go to state 52
    read       go to state 53
    readfunc   go to state 54
    write      go to state 55
    writefunc  go to state 56
    for        go to state 57
    varid      go to state 58
    ifstmt     go to state 59


State 78

   60 read: readfunc LP • RP
   61     | readfunc LP • readlist RP

    ID   shift, and go to state 41
    RP   shift, and go to state 110
    XID  shift, and go to state 49

    readlist  go to state 111
    varid     go to state 112


State 79

   67 write: writefunc LP • RP
   68      | writefunc LP • writelist RP

    ID        shift, and go to state 41
    STR       shift, and go to state 67
    INT       shift, and go to state 68
    REAL_NUM  shift, and go to state 69
    LP        shift, and go to state 86
    RP        shift, and go to state 113
    XID       shift, and go to state 49
    XREAL     shift, and go to state 71

    term       go to state 114
    factor     go to state 75
    writelist  go to state 115
    varid      go to state 76


State 80

   36 assign: varid EQUAL • simpexp

    ID        shift, and go to state 41
    STR       shift, and go to state 67
    INT       shift, and go to state 68
    REAL_NUM  shift, and go to state 69
    LP        shift, and go to state 86
    XID       shift, and go to state 49
    XREAL     shift, and go to state 71

    simpexp  go to state 116
    term     go to state 74
    factor   go to state 75
    varid    go to state 76


State 81

   35 assign: varid ASSIGN • simpexp

    ID        shift, and go to state 41
    STR       shift, and go to state 67
    INT       shift, and go to state 68
    REAL_NUM  shift, and go to state 69
    LP        shift, and go to state 86
    XID       shift, and go to state 49
    XREAL     shift, and go to state 71

    simpexp  go to state 117
    term     go to state 74
    factor   go to state 75
    varid    go to state 76


State 82

   37 assign: varid ':' • simpexp

    ID        shift, and go to state 41
    STR       shift, and go to state 67
    INT       shift, and go to state 68
    REAL_NUM  shift, and go to state 69
    LP        shift, and go to state 86
    XID       shift, and go to state 49
    XREAL     shift, and go to state 71

    simpexp  go to state 118
    term     go to state 74
    factor   go to state 75
    varid    go to state 76


State 83

    5 prog: PROGRAM progname ';' VAR declist $@2 BEG stmtlist ';' • END '.'
   29 stmtlist: stmtlist ';' • stmt

    ID       shift, and go to state 41
    END      shift, and go to state 119
    FOR      shift, and go to state 43
    IF       shift, and go to state 44
    READ     shift, and go to state 45
    READLN   shift, and go to state 46
    WRITE    shift, and go to state 47
    WRITELN  shift, and go to state 48
    XID      shift, and go to state 49

    stmt       go to state 109
    assign     go to state 52
    read       go to state 53
    readfunc   go to state 54
    write      go to state 55
    writefunc  go to state 56
    for        go to state 57
    varid      go to state 58
    ifstmt     go to state 59


State 84

   23 arraytype: ARRAY '[' INT • '.' '.' INT ']' OF standtype

    '.'  shift, and go to state 120


State 85

    3 prog: PROGRAM progname $@1 VAR declist ';' BEG stmtlist ';' • END '.'
   29 stmtlist: stmtlist ';' • stmt

    ID       shift, and go to state 41
    END      shift, and go to state 121
    FOR      shift, and go to state 43
    IF       shift, and go to state 44
    READ     shift, and go to state 45
    READLN   shift, and go to state 46
    WRITE    shift, and go to state 47
    WRITELN  shift, and go to state 48
    XID      shift, and go to state 49

    stmt       go to state 109
    assign     go to state 52
    read       go to state 53
    readfunc   go to state 54
    write      go to state 55
    writefunc  go to state 56
    for        go to state 57
    varid      go to state 58
    ifstmt     go to state 59


State 86

   56 factor: LP • simpexp RP

    ID        shift, and go to state 41
    STR       shift, and go to state 67
    INT       shift, and go to state 68
    REAL_NUM  shift, and go to state 69
    LP        shift, and go to state 86
    XID       shift, and go to state 49
    XREAL     shift, and go to state 71

    simpexp  go to state 122
    term     go to state 74
    factor   go to state 75
    varid    go to state 76


State 87

   48 simpexp: simpexp • '+' term
   49        | simpexp • '-' term
   77 varid: ID '[' simpexp • ']'

    ']'  shift, and go to state 123
    '+'  shift, and go to state 104
    '-'  shift, and go to state 105


State 88

   84 body: BEG • stmtlist ';' END

    ID       shift, and go to state 41
    FOR      shift, and go to state 43
    IF       shift, and go to state 44
    READ     shift, and go to state 45
    READLN   shift, and go to state 46
    WRITE    shift, and go to state 47
    WRITELN  shift, and go to state 48
    XID      shift, and go to state 49

    stmtlist   go to state 124
    stmt       go to state 51
    assign     go to state 52
    read       go to state 53
    readfunc   go to state 54
    write      go to state 55
    writefunc  go to state 56
    for        go to state 57
    varid      go to state 58
    ifstmt     go to state 59


State 89

   73 for: FOR idxexp DO • body

    ID       shift, and go to state 41
    BEG      shift, and go to state 88
    FOR      shift, and go to state 43
    IF       shift, and go to state 44
    READ     shift, and go to state 45
    READLN   shift, and go to state 46
    WRITE    shift, and go to state 47
    WRITELN  shift, and go to state 48
    XID      shift, and go to state 49

    stmt       go to state 90
    assign     go to state 52
    read       go to state 53
    readfunc   go to state 54
    write      go to state 55
    writefunc  go to state 56
    for        go to state 57
    varid      go to state 58
    ifstmt     go to state 59
    body       go to state 125


State 90

   83 body: stmt •

    $default  reduce using rule 83 (body)


State 91

   74 for: FOR idxexp body •

    $default  reduce using rule 74 (for)


State 92

   75 idxexp: varid ASSIGN • simpexp TO exp

    ID        shift, and go to state 41
    STR       shift, and go to state 67
    INT       shift, and go to state 68
    REAL_NUM  shift, and go to state 69
    LP        shift, and go to state 86
    XID       shift, and go to state 49
    XREAL     shift, and go to state 71

    simpexp  go to state 126
    term     go to state 74
    factor   go to state 75
    varid    go to state 76


State 93

   39 exp: exp • relop simpexp
   80 ifstmt: IF LP exp • RP THEN body
   81       | IF LP exp • RP body
   82       | IF LP exp • THEN body

    MOD    shift, and go to state 95
    THEN   shift, and go to state 127
    LT     shift, and go to state 96
    EQUAL  shift, and go to state 97
    GT     shift, and go to state 98
    LE     shift, and go to state 99
    GE     shift, and go to state 100
    NE     shift, and go to state 101
    RP     shift, and go to state 128

    relop  go to state 103


State 94

   38 exp: simpexp •
   48 simpexp: simpexp • '+' term
   49        | simpexp • '-' term
   56 factor: LP simpexp • RP

    RP   shift, and go to state 129
    '+'  shift, and go to state 104
    '-'  shift, and go to state 105

    RP        [reduce using rule 38 (exp)]
    $default  reduce using rule 38 (exp)


State 95

   46 relop: MOD •

    $default  reduce using rule 46 (relop)


State 96

   40 relop: LT •

    $default  reduce using rule 40 (relop)


State 97

   41 relop: EQUAL •

    $default  reduce using rule 41 (relop)


State 98

   42 relop: GT •

    $default  reduce using rule 42 (relop)


State 99

   43 relop: LE •

    $default  reduce using rule 43 (relop)


State 100

   44 relop: GE •

    $default  reduce using rule 44 (relop)


State 101

   45 relop: NE •

    $default  reduce using rule 45 (relop)


State 102

   79 ifstmt: IF exp RP • THEN body

    THEN  shift, and go to state 130


State 103

   39 exp: exp relop • simpexp

    ID        shift, and go to state 41
    STR       shift, and go to state 67
    INT       shift, and go to state 68
    REAL_NUM  shift, and go to state 69
    LP        shift, and go to state 86
    XID       shift, and go to state 49
    XREAL     shift, and go to state 71

    simpexp  go to state 131
    term     go to state 74
    factor   go to state 75
    varid    go to state 76


State 104

   48 simpexp: simpexp '+' • term

    ID        shift, and go to state 41
    STR       shift, and go to state 67
    INT       shift, and go to state 68
    REAL_NUM  shift, and go to state 69
    LP        shift, and go to state 86
    XID       shift, and go to state 49
    XREAL     shift, and go to state 71

    term    go to state 132
    factor  go to state 75
    varid   go to state 76


State 105

   49 simpexp: simpexp '-' • term

    ID        shift, and go to state 41
    STR       shift, and go to state 67
    INT       shift, and go to state 68
    REAL_NUM  shift, and go to state 69
    LP        shift, and go to state 86
    XID       shift, and go to state 49
    XREAL     shift, and go to state 71

    term    go to state 133
    factor  go to state 75
    varid   go to state 76


State 106

   51 term: factor '*' • factor

    ID        shift, and go to state 41
    STR       shift, and go to state 67
    INT       shift, and go to state 68
    REAL_NUM  shift, and go to state 69
    LP        shift, and go to state 86
    XID       shift, and go to state 49
    XREAL     shift, and go to state 71

    factor  go to state 134
    varid   go to state 76


State 107

   52 term: factor '/' • factor

    ID        shift, and go to state 41
    STR       shift, and go to state 67
    INT       shift, and go to state 68
    REAL_NUM  shift, and go to state 69
    LP        shift, and go to state 86
    XID       shift, and go to state 49
    XREAL     shift, and go to state 71

    factor  go to state 135
    varid   go to state 76


State 108

    1 prog: PROGRAM progname ';' VAR declist ';' BEG stmtlist ';' END • '.'
    7     | PROGRAM progname ';' VAR declist ';' BEG stmtlist ';' END •
    8     | PROGRAM progname ';' VAR declist ';' BEG stmtlist ';' END • ';'

    ';'  shift, and go to state 136
    '.'  shift, and go to state 137

    $default  reduce using rule 7 (prog)


State 109

   29 stmtlist: stmtlist ';' stmt •

    $default  reduce using rule 29 (stmtlist)


State 110

   60 read: readfunc LP RP •

    $default  reduce using rule 60 (read)


State 111

   61 read: readfunc LP readlist • RP
   65 readlist: readlist • ',' varid

    RP   shift, and go to state 138
    ','  shift, and go to state 139


State 112

   64 readlist: varid •

    $default  reduce using rule 64 (readlist)


State 113

   67 write: writefunc LP RP •

    $default  reduce using rule 67 (write)


State 114

   71 writelist: term •

    $default  reduce using rule 71 (writelist)


State 115

   68 write: writefunc LP writelist • RP
   72 writelist: writelist • ',' term

    RP   shift, and go to state 140
    ','  shift, and go to state 141


State 116

   36 assign: varid EQUAL simpexp •
   48 simpexp: simpexp • '+' term
   49        | simpexp • '-' term

    '+'  shift, and go to state 104
    '-'  shift, and go to state 105

    $default  reduce using rule 36 (assign)


State 117

   35 assign: varid ASSIGN simpexp •
   48 simpexp: simpexp • '+' term
   49        | simpexp • '-' term

    '+'  shift, and go to state 104
    '-'  shift, and go to state 105

    $default  reduce using rule 35 (assign)


State 118

   37 assign: varid ':' simpexp •
   48 simpexp: simpexp • '+' term
   49        | simpexp • '-' term

    '+'  shift, and go to state 104
    '-'  shift, and go to state 105

    $default  reduce using rule 37 (assign)


State 119

    5 prog: PROGRAM progname ';' VAR declist $@2 BEG stmtlist ';' END • '.'

    '.'  shift, and go to state 142


State 120

   23 arraytype: ARRAY '[' INT '.' • '.' INT ']' OF standtype

    '.'  shift, and go to state 143


State 121

    3 prog: PROGRAM progname $@1 VAR declist ';' BEG stmtlist ';' END • '.'

    '.'  shift, and go to state 144


State 122

   48 simpexp: simpexp • '+' term
   49        | simpexp • '-' term
   56 factor: LP simpexp • RP

    RP   shift, and go to state 129
    '+'  shift, and go to state 104
    '-'  shift, and go to state 105


State 123

   77 varid: ID '[' simpexp ']' •

    $default  reduce using rule 77 (varid)


State 124

   29 stmtlist: stmtlist • ';' stmt
   84 body: BEG stmtlist • ';' END

    ';'  shift, and go to state 145


State 125

   73 for: FOR idxexp DO body •

    $default  reduce using rule 73 (for)


State 126

   48 simpexp: simpexp • '+' term
   49        | simpexp • '-' term
   75 idxexp: varid ASSIGN simpexp • TO exp

    TO   shift, and go to state 146
    '+'  shift, and go to state 104
    '-'  shift, and go to state 105


State 127

   82 ifstmt: IF LP exp THEN • body

    ID       shift, and go to state 41
    BEG      shift, and go to state 88
    FOR      shift, and go to state 43
    IF       shift, and go to state 44
    READ     shift, and go to state 45
    READLN   shift, and go to state 46
    WRITE    shift, and go to state 47
    WRITELN  shift, and go to state 48
    XID      shift, and go to state 49

    stmt       go to state 90
    assign     go to state 52
    read       go to state 53
    readfunc   go to state 54
    write      go to state 55
    writefunc  go to state 56
    for        go to state 57
    varid      go to state 58
    ifstmt     go to state 59
    body       go to state 147


State 128

   80 ifstmt: IF LP exp RP • THEN body
   81       | IF LP exp RP • body

    ID       shift, and go to state 41
    BEG      shift, and go to state 88
    FOR      shift, and go to state 43
    IF       shift, and go to state 44
    READ     shift, and go to state 45
    READLN   shift, and go to state 46
    THEN     shift, and go to state 148
    WRITE    shift, and go to state 47
    WRITELN  shift, and go to state 48
    XID      shift, and go to state 49

    stmt       go to state 90
    assign     go to state 52
    read       go to state 53
    readfunc   go to state 54
    write      go to state 55
    writefunc  go to state 56
    for        go to state 57
    varid      go to state 58
    ifstmt     go to state 59
    body       go to state 149


State 129

   56 factor: LP simpexp RP •

    $default  reduce using rule 56 (factor)


State 130

   79 ifstmt: IF exp RP THEN • body

    ID       shift, and go to state 41
    BEG      shift, and go to state 88
    FOR      shift, and go to state 43
    IF       shift, and go to state 44
    READ     shift, and go to state 45
    READLN   shift, and go to state 46
    WRITE    shift, and go to state 47
    WRITELN  shift, and go to state 48
    XID      shift, and go to state 49

    stmt       go to state 90
    assign     go to state 52
    read       go to state 53
    readfunc   go to state 54
    write      go to state 55
    writefunc  go to state 56
    for        go to state 57
    varid      go to state 58
    ifstmt     go to state 59
    body       go to state 150


State 131

   39 exp: exp relop simpexp •
   48 simpexp: simpexp • '+' term
   49        | simpexp • '-' term

    '+'  shift, and go to state 104
    '-'  shift, and go to state 105

    $default  reduce using rule 39 (exp)


State 132

   48 simpexp: simpexp '+' term •

    $default  reduce using rule 48 (simpexp)


State 133

   49 simpexp: simpexp '-' term •

    $default  reduce using rule 49 (simpexp)


State 134

   51 term: factor '*' factor •

    $default  reduce using rule 51 (term)


State 135

   52 term: factor '/' factor •

    $default  reduce using rule 52 (term)


State 136

    8 prog: PROGRAM progname ';' VAR declist ';' BEG stmtlist ';' END ';' •

    $default  reduce using rule 8 (prog)


State 137

    1 prog: PROGRAM progname ';' VAR declist ';' BEG stmtlist ';' END '.' •

    $default  reduce using rule 1 (prog)


State 138

   61 read: readfunc LP readlist RP •

    $default  reduce using rule 61 (read)


State 139

   65 readlist: readlist ',' • varid

    ID   shift, and go to state 41
    XID  shift, and go to state 49

    varid  go to state 151


State 140

   68 write: writefunc LP writelist RP •

    $default  reduce using rule 68 (write)


State 141

   72 writelist: writelist ',' • term

    ID        shift, and go to state 41
    STR       shift, and go to state 67
    INT       shift, and go to state 68
    REAL_NUM  shift, and go to state 69
    LP        shift, and go to state 86
    XID       shift, and go to state 49
    XREAL     shift, and go to state 71

    term    go to state 152
    factor  go to state 75
    varid   go to state 76


State 142

    5 prog: PROGRAM progname ';' VAR declist $@2 BEG stmtlist ';' END '.' •

    $default  reduce using rule 5 (prog)


State 143

   23 arraytype: ARRAY '[' INT '.' '.' • INT ']' OF standtype

    INT  shift, and go to state 153


State 144

    3 prog: PROGRAM progname $@1 VAR declist ';' BEG stmtlist ';' END '.' •

    $default  reduce using rule 3 (prog)


State 145

   29 stmtlist: stmtlist ';' • stmt
   84 body: BEG stmtlist ';' • END

    ID       shift, and go to state 41
    END      shift, and go to state 154
    FOR      shift, and go to state 43
    IF       shift, and go to state 44
    READ     shift, and go to state 45
    READLN   shift, and go to state 46
    WRITE    shift, and go to state 47
    WRITELN  shift, and go to state 48
    XID      shift, and go to state 49

    stmt       go to state 109
    assign     go to state 52
    read       go to state 53
    readfunc   go to state 54
    write      go to state 55
    writefunc  go to state 56
    for        go to state 57
    varid      go to state 58
    ifstmt     go to state 59


State 146

   75 idxexp: varid ASSIGN simpexp TO • exp

    ID        shift, and go to state 41
    STR       shift, and go to state 67
    INT       shift, and go to state 68
    REAL_NUM  shift, and go to state 69
    LP        shift, and go to state 86
    XID       shift, and go to state 49
    XREAL     shift, and go to state 71

    exp      go to state 155
    simpexp  go to state 73
    term     go to state 74
    factor   go to state 75
    varid    go to state 76


State 147

   82 ifstmt: IF LP exp THEN body •

    $default  reduce using rule 82 (ifstmt)


State 148

   80 ifstmt: IF LP exp RP THEN • body

    ID       shift, and go to state 41
    BEG      shift, and go to state 88
    FOR      shift, and go to state 43
    IF       shift, and go to state 44
    READ     shift, and go to state 45
    READLN   shift, and go to state 46
    WRITE    shift, and go to state 47
    WRITELN  shift, and go to state 48
    XID      shift, and go to state 49

    stmt       go to state 90
    assign     go to state 52
    read       go to state 53
    readfunc   go to state 54
    write      go to state 55
    writefunc  go to state 56
    for        go to state 57
    varid      go to state 58
    ifstmt     go to state 59
    body       go to state 156


State 149

   81 ifstmt: IF LP exp RP body •

    $default  reduce using rule 81 (ifstmt)


State 150

   79 ifstmt: IF exp RP THEN body •

    $default  reduce using rule 79 (ifstmt)


State 151

   65 readlist: readlist ',' varid •

    $default  reduce using rule 65 (readlist)


State 152

   72 writelist: writelist ',' term •

    $default  reduce using rule 72 (writelist)


State 153

   23 arraytype: ARRAY '[' INT '.' '.' INT • ']' OF standtype

    ']'  shift, and go to state 157


State 154

   84 body: BEG stmtlist ';' END •

    $default  reduce using rule 84 (body)


State 155

   39 exp: exp • relop simpexp
   75 idxexp: varid ASSIGN simpexp TO exp •

    MOD    shift, and go to state 95
    LT     shift, and go to state 96
    EQUAL  shift, and go to state 97
    GT     shift, and go to state 98
    LE     shift, and go to state 99
    GE     shift, and go to state 100
    NE     shift, and go to state 101

    $default  reduce using rule 75 (idxexp)

    relop  go to state 103


State 156

   80 ifstmt: IF LP exp RP THEN body •

    $default  reduce using rule 80 (ifstmt)


State 157

   23 arraytype: ARRAY '[' INT '.' '.' INT ']' • OF standtype

    OF  shift, and go to state 158


State 158

   23 arraytype: ARRAY '[' INT '.' '.' INT ']' OF • standtype

    DOUBLE   shift, and go to state 28
    INTEGER  shift, and go to state 29
    REAL     shift, and go to state 30
    STRING   shift, and go to state 31

    standtype  go to state 159


State 159

   23 arraytype: ARRAY '[' INT '.' '.' INT ']' OF standtype •

    $default  reduce using rule 23 (arraytype)
